//=============================================================================
//
// file :        AnalogDAQ.h
//
// description : Include for the AnalogDAQ class.
//
// project :	Abstract Class for Analog Input Output Acquisition
//
// $Author: rsune $
//
// $Revision: 6892 $
//
// $Log$
// Revision 1.5  2007/02/13 14:20:54  srubio
// *** empty log message ***
//
// Revision 1.4  2007/02/13 12:11:26  srubio
// *** empty log message ***
//
// Revision 1.3  2007/02/13 11:49:24  srubio
// Added Modifications required by Dynamic Attributes specification
//
// Revision 1.2  2007/01/17 14:20:47  srubio
// New attributes, properties and commands
//
// Revision 1.1.1.1  2006/11/22 08:54:24  srubio
// First POGO Release of the Analog I/O Abstract Class
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _ANALOGDAQ_H
#define _ANALOGDAQ_H

#include <tango.h>
//using namespace Tango;

/**
 * @author	$Author: rsune $
 * @version	$Revision: 6892 $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------


namespace AnalogDAQ_ns {


/**
 * Class Description:
 * 
 */

/*
 *	Device States Description:
 *  Tango::UNKNOWN :  Device uncorrectly initialized
 *  Tango::STANDBY :  Device ready to start
 *  Tango::ON :       Device started, but not processing data at this moment
 *  Tango::RUNNING :  Device started and processing data
 *  Tango::FAULT :    Hardware error
 */


class AnalogDAQ: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//------------------------------------------------------------ = 0;	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevLong	*attr_SampleRate_read;
		Tango::DevLong	attr_SampleRate_write;
		Tango::DevLong	*attr_ChannelSamplesPerTrigger_read;
		Tango::DevLong	attr_ChannelSamplesPerTrigger_write;
		Tango::DevLong	*attr_NumOfTriggers_read;
		Tango::DevLong	attr_NumOfTriggers_write;
		Tango::DevDouble	*attr_MaxRefSource_read;
		Tango::DevDouble	attr_MaxRefSource_write;
		Tango::DevDouble	*attr_MinRefSource_read;
		Tango::DevDouble	attr_MinRefSource_write;
		Tango::DevString	*attr_TriggerSources_read;
		Tango::DevString	attr_TriggerSources_write;
		Tango::DevUShort	*attr_TriggerMode_read;
		Tango::DevUShort	attr_TriggerMode_write;
		Tango::DevDouble	*attr_BufferPeriod_read;
		Tango::DevDouble	attr_BufferPeriod_write;
		Tango::DevString	*attr_BufferedChannelsList_read;
		Tango::DevString	attr_BufferedChannelsList_write;
		Tango::DevLong	*attr_RawDATA_read;
		Tango::DevLong	attr_RawDATA_write;
		Tango::DevDouble	*attr_DoubleDATA_read;
		Tango::DevDouble	attr_DoubleDATA_write;
		Tango::DevString	*attr_FileName_read;
		Tango::DevString	attr_FileName_write;
		Tango::DevDouble	*attr_ScalarValue_read;
		Tango::DevDouble	attr_ScalarValue_write;
		Tango::DevDouble	*attr_ChannelSpectrum_read;
		Tango::DevDouble	attr_ChannelSpectrum_write;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	It must be an unique identifier for each card on the PC/Rack where it is installed. It could be the Board Number in the Rack, the Serial Number or the Product Id.
 */
	string	boardId;
/**
 *	Product Descriptor that allow us to identify this card, its provider and its behavior
 */
	string	boardType;
/**
 *	Input/Output Direction of the Channels to be managed,defined in this context:
 *	1.	Each Tango Device will manage all the Channels of a same Type/Direction of a DAQ Card.
 *	2.	Wonâ€™t be two Analog Inputs accessing to the same Card; and two different devices (1 AI + 1 AO) will be needed to manage a Multi-Purpose Card with Channels of both types.
 *	-> The Read/Write permissions of the DoubleDATA, RawDATA, *ChannelValues and *LastValue Attributes will be determined by the value of this Property
 *	
 *	The value will be 1 for input, and 0 for output
 */
	Tango::DevBoolean	isInput;
/**
 *	Onboard Buffer of the Physical Device.
 *	
 *	
 */
	Tango::DevULong	onBoardBuffer;
/**
 *	Maximum Sample Rate (per Channel) that is capable the DAQ Card.
 *	-> The SampleRate.MaxValue Attribute Property will be fixed each time this Property is modified.
 */
	Tango::DevULong	maxSampleRate;
/**
 *	Maximum Source Range allowed (Bipolar), it is understood as +/-MaxSourceRange.
 *	-> The Attributes MaxSourceRef and MinSourceRef will adapt its MaxValue and MinValue Properties to the value stored in this Property.
 */
	Tango::DevDouble	maxSourceRange;
/**
 *	Number of Bits of the DAQ Converter.
 *	-> It allows to convert from RawDATA (binary obtained from the Analog to Digital converter) to DoubleDATA (float point values normalized in the SourceRange).
 */
	Tango::DevUShort	dynamicRange;
/**
 *	Units concerning to the data measured/generated.
 *	-> This property will modify the units for all related Attributes.
 */
	string	units;
/**
 *	Total number of channels available in the DAQ card. This Property refers only to the Physical Channels of the same type of the Abstract Class (e.g. in an Analog Input Device it will refer only to the Analog Input Channels).
 *	-> It determines the maximum size of the Attribute BufferedChannels List and fixes the Attribute default value.
 */
	Tango::DevUShort	numOfChannels;
/**
 *	If set to 'True' the command 'start' will be run automatically after initialization. It will respect memorized attributes, so 'start' will be performed AFTER all memorized attributes have been applied.
 */
	Tango::DevBoolean	autoStart;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	AnalogDAQ(Tango::DeviceClass *cl,string &s):Device_4Impl(cl,s) {};
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	AnalogDAQ(Tango::DeviceClass *cl,const char *s):Device_4Impl(cl,s) {};
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	AnalogDAQ(Tango::DeviceClass *cl,const char *s,const char *d):Device_4Impl(cl,s,d) {};
//@}

/**
 * @name AnalogDAQ methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list) = 0;
/**
 *	Extract real attribute values for SampleRate acquisition result.
 */
	virtual void read_SampleRate(Tango::Attribute &attr) = 0;
/**
 *	Write SampleRate attribute values to hardware.
 */
	virtual void write_SampleRate(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for ChannelSamplesPerTrigger acquisition result.
 */
	virtual void read_ChannelSamplesPerTrigger(Tango::Attribute &attr) = 0;
/**
 *	Write ChannelSamplesPerTrigger attribute values to hardware.
 */
	virtual void write_ChannelSamplesPerTrigger(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for NumOfTriggers acquisition result.
 */
	virtual void read_NumOfTriggers(Tango::Attribute &attr) = 0;
/**
 *	Write NumOfTriggers attribute values to hardware.
 */
	virtual void write_NumOfTriggers(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for MaxRefSource acquisition result.
 */
	virtual void read_MaxRefSource(Tango::Attribute &attr) = 0;
/**
 *	Write MaxRefSource attribute values to hardware.
 */
	virtual void write_MaxRefSource(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for MinRefSource acquisition result.
 */
	virtual void read_MinRefSource(Tango::Attribute &attr) = 0;
/**
 *	Write MinRefSource attribute values to hardware.
 */
	virtual void write_MinRefSource(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for TriggerSources acquisition result.
 */
	virtual void read_TriggerSources(Tango::Attribute &attr) = 0;
/**
 *	Write TriggerSources attribute values to hardware.
 */
	virtual void write_TriggerSources(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for TriggerMode acquisition result.
 */
	virtual void read_TriggerMode(Tango::Attribute &attr) = 0;
/**
 *	Write TriggerMode attribute values to hardware.
 */
	virtual void write_TriggerMode(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for BufferPeriod acquisition result.
 */
	virtual void read_BufferPeriod(Tango::Attribute &attr) = 0;
/**
 *	Write BufferPeriod attribute values to hardware.
 */
	virtual void write_BufferPeriod(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for BufferedChannelsList acquisition result.
 */
	virtual void read_BufferedChannelsList(Tango::Attribute &attr) = 0;
/**
 *	Write BufferedChannelsList attribute values to hardware.
 */
	virtual void write_BufferedChannelsList(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for RawDATA acquisition result.
 */
	virtual void read_RawDATA(Tango::Attribute &attr) = 0;
/**
 *	Write RawDATA attribute values to hardware.
 */
	virtual void write_RawDATA(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for DoubleDATA acquisition result.
 */
	virtual void read_DoubleDATA(Tango::Attribute &attr) = 0;
/**
 *	Write DoubleDATA attribute values to hardware.
 */
	virtual void write_DoubleDATA(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for FileName acquisition result.
 */
	virtual void read_FileName(Tango::Attribute &attr) = 0;
/**
 *	Write FileName attribute values to hardware.
 */
	virtual void write_FileName(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for ScalarValue acquisition result.
 */
	virtual void read_ScalarValue(Tango::Attribute &attr) = 0;
/**
 *	Write ScalarValue attribute values to hardware.
 */
	virtual void write_ScalarValue(Tango::WAttribute &attr) = 0;
/**
 *	Extract real attribute values for ChannelSpectrum acquisition result.
 */
	virtual void read_ChannelSpectrum(Tango::Attribute &attr) = 0;
/**
 *	Write ChannelSpectrum attribute values to hardware.
 */
	virtual void write_ChannelSpectrum(Tango::WAttribute &attr) = 0;
/**
 *	Read/Write allowed for SampleRate attribute.
 */
	virtual bool is_SampleRate_allowed(Tango::AttReqType type); 
/**
 *	Read/Write allowed for ChannelSamplesPerTrigger attribute.
 */
	virtual bool is_ChannelSamplesPerTrigger_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for NumOfTriggers attribute.
 */
	virtual bool is_NumOfTriggers_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for MaxRefSource attribute.
 */
	virtual bool is_MaxRefSource_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for MinRefSource attribute.
 */
	virtual bool is_MinRefSource_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for TriggerSources attribute.
 */
	virtual bool is_TriggerSources_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for TriggerMode attribute.
 */
	virtual bool is_TriggerMode_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for BufferPeriod attribute.
 */
	virtual bool is_BufferPeriod_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for BufferedChannelsList attribute.
 */
	virtual bool is_BufferedChannelsList_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for RawDATA attribute.
 */
	virtual bool is_RawDATA_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for DoubleDATA attribute.
 */
	virtual bool is_DoubleDATA_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for FileName attribute.
 */
	virtual bool is_FileName_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for ScalarValue attribute.
 */
	virtual bool is_ScalarValue_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for ChannelSpectrum attribute.
 */
	virtual bool is_ChannelSpectrum_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Start command.
 */
	virtual bool is_Start_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Stop command.
 */
	virtual bool is_Stop_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ImportFile command.
 */
	virtual bool is_ImportFile_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ExportFile command.
 */
	virtual bool is_ExportFile_allowed(const CORBA::Any &any);
/**
 * 
 *	@exception DevFailed
 */
	virtual void	start() = 0;
/**
 * 
 *	@exception DevFailed
 */
	virtual void	stop() = 0;
/**
 * Imports the file defined by the FileName Attribute
  *	@return	Ok
 *	@exception DevFailed
 */
	virtual Tango::DevBoolean	import_file(Tango::DevString) = 0;
/**
 * Exports to the file described by the FileName attribute
 *	@return	Ok
 *	@exception DevFailed
 */
	virtual Tango::DevBoolean	export_file(Tango::DevString) = 0;

//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------
};

}	// namespace_ns

#endif	// _ANALOGDAQ_H
