static const char *RcsId = "$Header$";
//+=============================================================================
//
// file :         AnalogDAQStateMachine.cpp
//
// description :  C++ source for the AnalogDAQ and its alowed. 
//                method for commands and attributes
//
// project :      TANGO Device Server
//
// $Author: rsune $
//
// $Revision: 6892 $
//
// $Log$
// Revision 1.4  2007/02/13 12:11:26  srubio
// *** empty log message ***
//
// Revision 1.3  2007/02/13 11:49:24  srubio
// Added Modifications required by Dynamic Attributes specification
//
// Revision 1.2  2007/01/17 14:20:47  srubio
// New attributes, properties and commands
//
// Revision 1.1.1.1  2006/11/22 08:54:24  srubio
// First POGO Release of the Analog I/O Abstract Class
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include <tango.h>
#include <AnalogDAQ.h>
#include <AnalogDAQClass.h>

/*====================================================================
 *	This file contains the methods to allow commands and attributes
 * read or write execution.
 *
 * If you wand to add your own code, add it between 
 * the "End/Re-Start of Generated Code" comments.
 *
 * If you want, you can also add your own methods.
 *====================================================================
 */

namespace AnalogDAQ_ns
{

//=================================================
//		Attributes Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_SampleRate_allowed
// 
// description : 	Read/Write allowed for SampleRate attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_SampleRate_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::ON	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_ChannelSamplesPerTrigger_allowed
// 
// description : 	Read/Write allowed for ChannelSamplesPerTrigger attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_ChannelSamplesPerTrigger_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::ON	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_NumOfTriggers_allowed
// 
// description : 	Read/Write allowed for NumOfTriggers attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_NumOfTriggers_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::ON	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_MaxRefSource_allowed
// 
// description : 	Read/Write allowed for MaxRefSource attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_MaxRefSource_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::ON	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_MinRefSource_allowed
// 
// description : 	Read/Write allowed for MinRefSource attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_MinRefSource_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::ON	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_TriggerSources_allowed
// 
// description : 	Read/Write allowed for TriggerSources attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_TriggerSources_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::ON	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_TriggerMode_allowed
// 
// description : 	Read/Write allowed for TriggerMode attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_TriggerMode_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::ON	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_BufferPeriod_allowed
// 
// description : 	Read/Write allowed for BufferPeriod attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_BufferPeriod_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::ON	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_BufferedChannelsList_allowed
// 
// description : 	Read/Write allowed for BufferedChannelsList attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_BufferedChannelsList_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::ON	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_RawDATA_allowed
// 
// description : 	Read/Write allowed for RawDATA attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_RawDATA_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_DoubleDATA_allowed
// 
// description : 	Read/Write allowed for DoubleDATA attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_DoubleDATA_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_FileName_allowed
// 
// description : 	Read/Write allowed for FileName attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_FileName_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_ScalarValue_allowed
// 
// description : 	Read/Write allowed for ScalarValue attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_ScalarValue_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_ChannelSpectrum_allowed
// 
// description : 	Read/Write allowed for ChannelSpectrum attribute.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_ChannelSpectrum_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}

//=================================================
//		Commands Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_Start_allowed
// 
// description : 	Execution allowed for Start command.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_Start_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::UNKNOWN	||
		get_state() == Tango::ON	||
		get_state() == Tango::RUNNING	||
		get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_Stop_allowed
// 
// description : 	Execution allowed for Stop command.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_Stop_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::STANDBY)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_ImportFile_allowed
// 
// description : 	Execution allowed for ImportFile command.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_ImportFile_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::ON	||
		get_state() == Tango::RUNNING	||
		get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		AnalogDAQ::is_ExportFile_allowed
// 
// description : 	Execution allowed for ExportFile command.
//
//-----------------------------------------------------------------------------
bool AnalogDAQ::is_ExportFile_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::ON	||
		get_state() == Tango::RUNNING	||
		get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}

}	// namespace AnalogDAQ_ns
